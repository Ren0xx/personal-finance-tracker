generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    transactions  Transaction[]
    budgets       Budget[]
    savingsGoals  SavingsGoal[]
    Category      Category[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Transaction {
    id          String   @id @default(cuid())
    userId      String
    categoryId  String
    amount      Decimal  @db.Decimal(10, 2)
    description String?
    date        DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
    id           String           @id @default(cuid())
    name         String
    userId       String
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    transactions Transaction[]
    budgets      BudgetCategory[]
}

model Budget {
    id          String           @id @default(cuid())
    name        String
    description String?
    userId      String
    categoryId  String
    amount      Decimal          @db.Decimal(10, 2)
    startDate   DateTime
    endDate     DateTime
    user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    categories  BudgetCategory[]
}

model BudgetCategory {
    budgetId   String
    categoryId String
    budget     Budget   @relation(fields: [budgetId], references: [id])
    category   Category @relation(fields: [categoryId], references: [id])

    @@id([budgetId, categoryId])
}

model SavingsGoal {
    id            String    @id @default(cuid())
    userId        String
    name          String
    targetAmount  Decimal   @db.Decimal(10, 2)
    currentAmount Decimal   @default(0) @db.Decimal(10, 2)
    deadline      DateTime?
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
